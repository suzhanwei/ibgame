package getui_model

import(
	"github.com/spf13/cast"
	"time"
	"fmt"
	"encoding/json"
	"crypto/sha256"
	"bytes"
	"net/http"
	"ibgame/logs"
	"io/ioutil"
)
type Single struct {
	Message      MessageItem      `json:"message"`
	Notification NotificationItem `json:"notification"`
	Cid          string           `json:"cid"`
	Requestid    string           `json:"requestid"`
}

type MessageItem struct {
	Appkey            string `json:"appkey"`
	IsOffline         bool   `json:"is_offline"`
	OfflineExpireTime int    `json:"offline_expire_time"`
	Msgtype           string `json:"msgtype"`
}
type NotificationItem struct {
	Style               StyleItem  `json:"style"`
	TransmissionType    bool   `json:"transmission_type"`
	TransmissionContent string `json:"transmission_content"`
}

type StyleItem struct {
	Type  int    `json:"type"`
	Text  string `json:"text"`
	Title string `json:"title"`
}

const(
	APPKEY="al0zZ6nvSO9tvxPPrTVHD9"
	MASTERSECRET="UpL4wlvdSh7xWMdRyyHP21"
)

func PushSingel(param Single)(ret string,err error){

	url:="https://restapi.getui.com/v1/9sQ07BI8xW7VeKElV9W9p6/push_single"

    payloadBytes, e3 := json.Marshal(param)
    if e3 != nil {
		logs.Error.Println("json err",e3)
		err=e3
		return
	}
	
	body := bytes.NewReader(payloadBytes)
	req, e2 := http.NewRequest("POST", url, body)
	if e2 != nil {
		logs.Error.Println("http req err",e2)
		err=e2
		return
	}
	now:=time.Now().Unix()
	str:=APPKEY + cast.ToString(now) + MASTERSECRET
	logs.Info.Println(str)
	
	s:=getSha256(str)

	var a Auth

	a.Appkey=APPKEY
	a.Timestamp=cast.ToString(now)
	a.Sign=s

	r,_:=getAuth(a)
	logs.Info.Println(r)

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authtoken", r)
	
	resp, e := http.DefaultClient.Do(req)
	if e != nil {
		logs.Error.Println("http resp",e)
		err=e
		return
	}
	b, e1 := ioutil.ReadAll(resp.Body)
	if e1 != nil {
		logs.Error.Println("http resp",e1)
		err=e
		return
	}
	defer resp.Body.Close()
	ret = string(b)
	return
}


// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

type Auth struct {
	Sign      string `json:"sign"`
	Timestamp string `json:"timestamp"`
	Appkey    string `json:"appkey"`
}
func getAuth(p Auth) (ret string,err error) {

payloadBytes, e:= json.Marshal(p)

if e != nil {
	logs.Error.Println("http resp",e)
	err =e
		return
}
body := bytes.NewReader(payloadBytes)

req, e1 := http.NewRequest("POST", "https://restapi.getui.com/v1/CKWfvgBDRF9aSnGrvD7IJ4/auth_sign", body)
if e1 != nil {
	logs.Error.Println("http resp",e1)
	err=e1
	return
}
req.Header.Set("Content-Type", "application/json")

resp, e2 := http.DefaultClient.Do(req)
if e2 != nil {
	logs.Error.Println("http resp",e1)
	err=e2
	return
}

b, e3 := ioutil.ReadAll(resp.Body)
	if e3 != nil {
		logs.Error.Println("http resp",e3)
		err=e3
		return
	}
	fmt.Println(string(b))
	var re Result
_=json.Unmarshal(b,&re)
ret=re.AuthToken
defer resp.Body.Close()
return
}
type Result struct{
	Result    string `json:"result"`
	AuthToken string `json:"auth_token"`
}
func getSha256(s string )string {
	h := sha256.New()
    h.Write([]byte(s))
	return fmt.Sprintf("%x",h.Sum(nil))
}
